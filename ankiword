#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
import json
import importlib
import os

sys.path.append('anki')
from anki import Collection as aopen

def initAnkiModule(ankiwordconfig, card_type):
    if "collection" not in ankiwordconfig or "deck" not in ankiwordconfig:
        return None
    deck = aopen(ankiwordconfig['collection'])
    deckId = deck.decks.id(ankiwordconfig['deck'])

    deck.decks.select(deckId)
    model = deck.models.byName(card_type.GetCardType(deck.models))
    model['did'] = deckId
    deck.models.save(model)
    deck.models.setCurrent(model)
    return deck

def handleProfile(ankiwordconfig,word,back,append):

    card_type = ankiwordconfig['card_type'] if 'card_type' in ankiwordconfig else 'basic'
    dict_source = importlib.import_module('module.{}'.format(ankiwordconfig['dict_source'].lower()))
    card_type = importlib.import_module('cardtype.{}'.format(card_type))
    deck = initAnkiModule(ankiwordconfig,card_type)

    nids = deck.findNotes("'Front:{}<br>*'".format(word))
    if 1 == len(nids):
        if append and append not in deck.getNote(nids[0])["Back"]:
            deck.findReplace(nids, 
                deck.getNote(nids[0])["Back"], 
                deck.getNote(nids[0])["Back"] + append + "<br>", 
                field="Back")
        else:
            print("Deck already exist:")
        print("Front Side: {}".format(deck.getNote(nids[0])["Front"]))
        print("Back Side: {}".format(deck.getNote(nids[0])["Back"]))
    elif len(nids) > 1:
        print("Duplicated Deck found")
        for nid in nids:
            print("Front Side: {}".format(deck.getNote(nid)["Front"]))
            print("Back Side: {}".format(deck.getNote(nid)["Back"]))
    else:
        if back:
            result['front_word'] = word + '<br>'
            result['back_word'] = back + '<br>'
        else:
            result = dict_source.LookUp(word, ankiwordconfig)

        if result is None:
            return

        if append:
            result['back_word'] += append + '<br>'

        card_data = card_type.MakeCard(result)
        if 0 == len(card_data):
            print("Generate card_data failed")
            return

        card = deck.newNote()
        for key in card_data:
           card[key] = card_data[key]
        try:
            deck.addNote(card)
        except(Exception, e):
            if hasattr(e, "data"):
                sys.exit("ERROR: Cound not add {}:{}", e.data["field"], e.data['type'])
            else:
                sys.exit(e)
        print("Front Side: {}".format(card["Front"]))
        print("Back Side: {}".format(card["Back"]))

    deck.save()
    deck.close()

if '__main__':
    import argparse
    with open('config.json', encoding='utf-8') as config_file:
        ankiwordconfig = json.load(config_file)

    parser = argparse.ArgumentParser()
    parser.add_argument("word",help="word to add to anki, front side of the card")
    parser.add_argument("-b", "--back",help="Back side of the card, if this option is provied, ankiword will not lookup the word online")
    parser.add_argument("-a", "--append",help="Things append to the back side of the card")
    args = parser.parse_args()

    handleProfile(ankiwordconfig,args.word,args.back,args.append)
